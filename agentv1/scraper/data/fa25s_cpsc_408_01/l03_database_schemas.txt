l03_database_schemas
Date: 2025-09-20

--- Slide 1 ---
- Database Schemas
- CPSC408
 --- Slide 2 ---
- Database Schemas
- A database schema is a diagram and/or written notation that defines all tables and all attributes of an entire database. This is a complete plan for a database that is ready to be implemented.
- We can create a database schema from a valid ER diagram by transforming the relationships into foreign keys.
 --- Slide 3 ---
- FOREIGN KEYS
- Foreign Keys are attribute(s) in one table that reference the primary key of a different table.
- The table containing the original primary key is called the parent table, and the table that makes a reference to the primary key and contains the foreign key is called the child table.
 --- Slide 4 ---
- SCHEMAS & FOREIGN KEYS
- Consider the following database ER Diagram for a library.
- We can transform this ER diagram into a database schema by implementing these relationships using keys.
- Publisher
- Book
- Reader
- Publish
- Borrow
- M
- 1
- M
- 1
 --- Slide 5 ---
- SCHEMAS & FOREIGN KEYS
- We first create the structure of the schema by listing all entities and attributes, including the keys we have selected
- book (ISBN, Name, Author)
- reader (rID, Name, Phone)
- publisher (pID, Name, Address)
- Publisher
- Book
- Reader
- Publish
- Borrow
- M
- 1
- M
- 1
 --- Slide 6 ---
- FOREIGN KEYS
- book (ISBN, Name, Author)
- reader (rID, Name, Phone)
- publisher (pID, Name, Address)
- We then convert these relationships into foreign keys. Here, for example, we need to implement the "borrow" relationship, which is a one-to-many relationship.
- Publisher
- Book
- Reader
- Publish
- Borrow
- M
- 1
- M
- 1
 --- Slide 7 ---
- FOREIGN KEYS
- book (ISBN, Name, Author, rID*)
- reader (rID, Name, Phone)
- publisher (pID, Name, Address)
- We can accomplish this by making the primary key of the reader table a foreign key in the book table.
- Publisher
- Book
- Reader
- Publish
- Borrow
- M
- 1
- M
- 1
 --- Slide 8 ---
- Atomicity
- Since the reader-to-book relationship is one-to-many, the primary key of the reader table has to become the foreign key of the book table.
- book (ISBN, Name, Author, rID*)
- reader (rID, Name, Phone)
- publisher (pID, Name, Address)
 --- Slide 9 ---
- Atomicity
- We do this to maintain what we call atomicity within our tables.
- Atomicity requires each cell in each column to only contain one value (the values in the cells are then called atomic)
 --- Slide 10 ---
- Atomicity
- For example, if we made the book's ISBN a foreign key on our reader table, then the reader table would appear something like the below.
- This column would need to have more than one value in it.
rID	name	phone	ISBN* 1	Sally	111-2222	1234, 5678, 1011 2	Mary	333-4444	3456, 4256
 --- Slide 11 ---
- Atomicity
- This can make searching, inserting, and adding records to the reader table much more difficult.
- Since we know due to cardinality that each book will only have one reader, we know we will only have to store one value in that cell.
- Making rID the foreign key on the book table maintains atomicity.
 --- Slide 12 ---
- Atomicity ISBN	Name	Author	rID* 1234	Mary Poppins	Pamela Lyndon Travers	1 5678	Charlotte's Web	E. B. White	2
 --- Slide 13 ---
- FOREIGN KEYS
- publisher (pID, Name, Address)
- reader(rID,Name,Phone)
- book(ISBN,Name,Author)
- Suppose we change the cardinality between book and publisher to be one to one.
- Publisher
- Book
- Reader
- Publish
- Borrow
- 1
- 1
- M
- 1
 --- Slide 14 ---
- FOREIGN KEYS
- publisher (pID, Name, Address)
- reader(rID,Name,Phone)
- book(ISBN,Name,Author)
- Since a one-to-one relationship will never have more than one reference on either side, we can put the foreign key wherever we want.
- Publisher
- Book
- Reader
- Publish
- Borrow
- 1
- 1
- M
- 1
 --- Slide 15 ---
- FOREIGN KEYS
- publisher (pID, Name, Address, ISBN*)
- reader(rID, Name, Phone)
- book(ISBN, Name, Author)
- Option 1: Add the PK of book as a FK in publisher
- Publisher
- Book
- Reader
- Publish
- Borrow
- 1
- 1
- M
- 1
 --- Slide 16 ---
- FOREIGN KEYS
- Publisher
- Book
- Reader
- Publish
- Borrow
- 1
- 1
- M
- 1
- publisher (pID, Name, Address)
- reader(rID, Name, Phone)
- book(ISBN, Name, Author, pID*)
- Option 2. Add the PK of publisher as a FK in book
 --- Slide 17 ---
- FOREIGN KEYS
- publisher (pID, Name, Address)
- reader(rID,Name,Phone)
- book(ISBN,Name,Author)
- Suppose we change the cardinality between reader and book to be many to many.
- Publisher
- Book
- Reader
- Publish
- Borrow
- M
- 1
- M
- M
 --- Slide 18 ---
- FOREIGN KEYS
- publisher (pID, Name, Address)
- reader(rID,Name,Phone)
- book(ISBN,Name,Author)
- No matter which of the two tables we place the foreign key on, we will always be breaking our atomicity!
- Publisher
- Book
- Reader
- Publish
- Borrow
- M
- 1
- M
- M
 --- Slide 19 ---
- FOREIGN KEYS
- publisher (pID, Name, Address)
- reader(rID,Name,Phone)
- book(ISBN,Name,Author)
- To address this, we need another table to show this relationship.
- Publisher
- Book
- Reader
- Publish
- Borrow
- M
- 1
- M
- M
 --- Slide 20 ---
- FOREIGN KEYS
- publisher (pID, Name, Address)
- reader(rID,Name,Phone)
- book(ISBN,Name,Author)
- borrowHistory(ISBN*,rID*)
- Publisher
- Book
- Reader
- Publish
- Borrow
- M
- 1
- M
- M
 --- Slide 21 ---
- The New Table (M:M)
- Let's dig into that new table a little bit. Here, we can see that it is annotating to us which user has read which book, and every cell on the table only has one value. This is great for atomicity.
ISBN*	rID* 1234	1 1234	2 5678	2
 --- Slide 22 ---
- The New Table (M:M)
- How can each column be both a primary key and a foreign key? How does that even make sense?
ISBN*	rID* 1234	1 1234	2 5678	2
 --- Slide 23 ---
- The New Table (M:M)
- Primary Key: When assessing this table, we can see that ISBN cannot be unique and rID cannot be unique. Due to this, I assert that we have a composite primary key of (ISBN, rID) ISBN	rID 1234	1 1234	2 5678	2
 --- Slide 24 ---
- The New Table (M:M)
- Foreign Keys: Since this is not the books table and I have to look elsewhere to get more information on the book in question, this ISBN number must necessarily be a foreign key ISBN*	rID 1234	1 1234	2 5678	2
 --- Slide 25 ---
- The New Table (M:M)
- Foreign Keys: I can then assert the same for readers and declare rID a foreign key.
ISBN*	rID* 1234	1 1234	2 5678	2
 --- Slide 26 ---
- The New Table (M:M)
- Thus, we can assert that each column separately is its own foreign key, but together they form one primary key that is also a composite key. Separately they point to other tables, and together they uniquely identify records of those tables touching ISBN*	rID* 1234	1 1234	2 5678	2
 --- Slide 27 ---
- Summary
- When implementing relationships on our schema:
- One to One:
- You can place the foreign key on either table.
- One to Many:
- The primary key of the one MUST become the foreign key of the many.
- Many to Many:
- You must create a new table with two foreign keys that are together a composite primary key
 --- Slide 28 ---
- Example
- Create a schema using this ER Diagram of the NHL in class assignment
 --- Slide 29 ---
- Example
- Team(TeamID, Name, City, Coach)
- Player(PlayerID, Name, Position, Skill Level, TeamID*)
- Game(GameID, Date, Score)
- Injury(InjuryID, Description, PlayerID*, GameID*)
- TeamGames(GameID*, TeamID*)
 --- Slide 30 ---
- Example
- If we did two one-to-many relationships between team and game instead of one many-to-many, it would look like this:
- Team(TeamID, Name, City, Coach)
- Player(PlayerID, Name, Position, Skill Level, TeamID*)
- Game(GameID, Date, Score, HomeTeamID*, AwayTeamID*)
- Injury(InjuryID, Description, PlayerID*, GameID*)