Chapter 5 :: Digital Building Blocks Digital Design and Computer Architecture David Money Harris and Sarah L. Harris Copyright © 2007 Elsevier 5-<1>
 Chapter 5 :: Topics - 5.1 Introduction - 5.2 Arithmetic Circuits - 5.3 Number Systems - 5.4 Sequential Building Blocks - 5.5 Memory Arrays - 5.6 Logic Arrays Copyright © 2007 Elsevier 5-<2>
 5.1 Introduction - Digital building blocks:
- Gates, multiplexers, decoders, registers, arithmetic circuits, counters, memory arrays, logic arrays - Building blocks demonstrate hierarchy, modularity, and regularity: - - - - Hierarchy of simpler components - Well-defined interfaces and functions - Regular structure easily extended to different sizes - Will use many of these building blocks to build a microprocessor in Chapter 7 - Copyright © 2007 Elsevier 5-<3>
 5.2 Arithmetic Circuit 1-Bit Adders Half Full Adder Adder A B A B C C & C out + out + in & Ein S S G A I A A B C S C A B C S I out in out 00000 #B' 8000 - - B 01001 I t O !
o 10010 S O S Cou 111 - 011 > 10 - 100101 S = 10110 C = 10 out 111 S = C = out Copyright © 2007 Elsevier 5-<4>
 1-Bit Adders Half Full Adder Adder A B A B C C C out + out + in OR + = S d S AND A B C S C A B C S ·= out in out 000000000 ⑦ XOR = 010100101 - 100101001 - 11100111010001 # A B 10110 S = 11010 C = - AB out 11111 - Cin A BO o S = C = AB Blint Alin out + Copyright © 2007 Elsevier 5-<5>
 1-Bit Adders Half Full Adder Adder A B A B C C C out + out + in S S A B C S C A B C S out in out 0000000000101001011001010011110011101000110110 S = A Å B 11010 C = AB out 11111 S = A Å B Å C in C = AB + AC + BC out in in Copyright © 2007 Elsevier 5-<6>
 Multibit Adder, also called CPA - Several types of carry propagate adders (CPAs) are:
- Ripple-carry adders (slow) - Carry-lookahead adders (fast) - Prefix adders (faster) - Carry-lookahead and prefix adders are faster for large adders but require more hardware.
Symbol A B N auf = N N integer C C number out + in N S Copyright © 2007 Elsevier 5-<7>
 Ripple-Carry Adder 20 Lin ↳ C full , As AsAzA , - Chain 1-bit adders together BB - Carry ripples through entire chain - Disadvantage: slow A B A B A B A B ↳ 3131303011& 00 C C out + + + + in C C C C 302910 - - S S S S 313010 - - - Copyright © 2007 Elsevier 5-<8>
 5.2.2Subtracter B) A ( A D = + - - Symbol Implementation A B N A B er gar N N N N - + N N Y Y 5-<9>
 5.2.3Comparator: Equality if in pute time ↓ Symbol Implementation A all 3 inputs if B the are ↓ A same A B 44 B Equal = A B Equal A ↑ B 5-<10>
 5.2.4Arithmetic Logic Unit (ALU) the define operation d F Function 2:0 A B 000 A & B AND bitwise N N operations 001 A | B OR ADD 010 A + B F ALU 3011 not used - N 100 A & ~B - - Y 101 A | ~B - Lab Defined 2110 A - B in SUB 111 SLT - ALB if than true , if 5-<11> I set less otherwise false
 5.2.5Shifters - Logical shifter: shifts value to left or right and fills empty spaces with - 0's - m - Ex: 11001 >> 2 = -z - Ex: 11001 << 2 = 00100 [J - numeric value bits represent # a - Arithmetic shifter: same as logical shifter, but on right shift, fills -empty spaces with the old most significant bit (msb-).
- Ex: 11001 >>> 2 = TT110 - Ex: 11001 <<< 2 = E C - Rotator: rotates bits in a circle, such that bits shifted off one end are shifted into the other end & - Ex: 11001 ROR 2 = 01110 - Ex: 11001 ROL 2 = M 5-<12>
 Shifters - Logical shifter: shifts value to left or right and fills empty spaces with 0's - Ex: 11001 >> 2 = 00110 - Ex: 11001 << 2 = 00100 - Arithmetic shifter: same as logical shifter, but on right shift, fills empty spaces with the old most significant bit (msb).
- Ex: 11001 >>> 2 = 11110 - Ex: 11001 <<< 2 = 00100 - Rotator: rotates bits in a circle, such that bits shifted off one end are shifted into the other end - Ex: 11001 ROR 2 = 01110 - Ex: 11001 ROL 2 = 001115-<13>
 Shifters as Multipliers and Dividers - A left shift by N bits multiplies a number by 2N O - Ex: 00001 << 2 = 00100 (1 × 22 = 4) -99- - - Ex: 11&101 << 2 = 10100 (-3 × 22 = -12) * ----- > - + -126 + 4 = - - The arithmetic right shift by N divides a number by 2N - - Ex: 01000 >>> 2 = 00010 (8 ÷ 22 = 2) & w - - - Ex: 10000 >>> 2 = 11100 (-16 ÷ 22 = -4) - - + 6roty 4 = - 5-<14>
 5.3 Number Systems - What kind of numbers do you know ?
- How to represent using binary representations?
- Positive numbers - Unsigned binary - Negative numbers - Two's complement - Sign/magnitude numbers N * - What about fractions? 0x2- .
Yis % fixed point 5-<15>
 5.4 Sequential Building Blocks 5.4.1 Counters - Increments on each clock edge.
- Used to cycle through numbers. For example, - 000, 001, 010, 011, 100, 101, 110, 111, 000, 001… - Example uses:
- Digital clock displays - Program counter: keeps track of current instruction executing Symbol Implementation oool & CLK CLK N register N N Q + - Q = r N N Reset ② Reset 5-<16>